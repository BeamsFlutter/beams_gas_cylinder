
///////////////////////////Assignment Screen
import 'package:beams_cylinder/controller/global/common_controller.dart';
import 'package:beams_cylinder/view/pages/assignment/controller/assignmnet_controller.dart';
import 'package:beams_cylinder/view/pages/assignment/views/itemdetailscreen.dart';
import 'package:beams_cylinder/view/pages/booking/controller/booking_controller.dart';
import 'package:beams_cylinder/view/pages/booking/controller/customerController.dart';
import 'package:beams_cylinder/view/pages/booking/controller/deliveryController.dart';
import 'package:beams_cylinder/view/pages/booking/controller/item_controller.dart';
import 'package:beams_cylinder/view/components/common/tabButton.dart';
import 'package:beams_cylinder/view/pages/booking/views/customerScreen.dart';
import 'package:beams_cylinder/view/pages/booking/views/deliveryScreen.dart';
import 'package:beams_cylinder/view/pages/booking/views/itemsScreen.dart';
import 'package:beams_cylinder/view/styles/colors.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bounce/flutter_bounce.dart';
import 'package:flutter_custom_clippers/flutter_custom_clippers.dart';
import 'package:get/get.dart';
import '../../components/bottomNavigationBar/bottom_navigator_item.dart';
import '../../components/common/common.dart';
import '../../components/common/Roundinputfield.dart';

class AssignmentScreen extends StatefulWidget {
  const AssignmentScreen({Key? key}) : super(key: key);
  @override
  State<AssignmentScreen> createState() => _AssignmentScreenState();
}

class _AssignmentScreenState extends State<AssignmentScreen> {
  final AssignmentController assignmentController =
  Get.put(AssignmentController());
  final BookingController bookingController = Get.put(BookingController());
  final CommonController commonController = Get.put(CommonController());
  final CustomerController customerController = Get.put(CustomerController());
  var orderlist  = [

    {
      "CODE":"001",
      "CNAME":"WER",
      "PRIORITY":"EMERGENCY",
      "LOCATION":"AL NAHDA",
      "ITEMS":"CNG 35KG"
    },
    {
      "CODE":"002",
      "CNAME":"QWE ",
      "PRIORITY":"NORMAL",
      "LOCATION":"QUSAIS",
      "ITEMS":"LPG 25KG"
    },
    {
      "CODE":"003",
      "CNAME":"EFG",
      "PRIORITY":"EMERGENCY",
      "LOCATION":"SHARJAH",
      "ITEMS":"CNG 30KG"
    },
    {
      "CODE":"004",
      "CNAME":"ABC",
      "PRIORITY":"NORMAL",
      "LOCATION":"GHUBAIBA",
      "ITEMS":"LPG 50KG"
    },
    {
      "CODE":"001",
      "CNAME":"WER",
      "PRIORITY":"EMERGENCY",
      "LOCATION":"AL NAHDA",
      "ITEMS":"CNG 35KG"
    },
    {
      "CODE":"002",
      "CNAME":"QWE ",
      "PRIORITY":"NORMAL",
      "LOCATION":"QUSAIS",
      "ITEMS":"LPG 25KG"
    },
    {
      "CODE":"003",
      "CNAME":"EFG",
      "PRIORITY":"EMERGENCY",
      "LOCATION":"SHARJAH",
      "ITEMS":"CNG 30KG"
    },
    {
      "CODE":"004",
      "CNAME":"ABC",
      "PRIORITY":"NORMAL",
      "LOCATION":"GHUBAIBA",
      "ITEMS":"LPG 50KG"
    }

  ];
  @override
  void initState() {
    assignmentController.pageController = PageController();
    assignmentController.wstrPageMode.value = 'VIEW';
    // assignmentController.apiViewAssignment('', "LAST");
    // TODO: implement initState
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return Obx(() => Scaffold(
      // resizeToAvoidBottomInset : false,
      appBar: AppBar(
        elevation: 0,
        centerTitle: true,
        leading: IconButton(
          onPressed: () {
            assignmentController.fnBackPage(context);
          },
          icon: Icon(Icons.arrow_back),
        ),
        flexibleSpace: Container(
          decoration:
          boxImageDecorationC("assets/images/waterbg.png", 0, 0, 0, 0),
        ),
        title: tcn('Assignment', Colors.white, 20),
        actions: const [
          Padding(
            padding: EdgeInsets.all(12.0),
            child: Icon(
              Icons.water_drop_outlined,
              color: Colors.white,
              size: 25,
            ),
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: Container(
              decoration: boxDecoration(nearlyWhite, 10),
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(10.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            const Icon(
                              Icons.tag,
                              color: Colors.black,
                              size: 15,
                            ),
                            gapWC(5),
                            tc(assignmentController.frDocno.value,
                                txtColor, 10)
                          ],
                        ),
                        Row(
                          children: [
                            const Icon(
                              Icons.calendar_month,
                              color: Colors.black,
                              size: 15,
                            ),
                            gapWC(5),
                            tcn(
                                setDate(
                                    7,
                                    assignmentController
                                        .docDate.value)
                                    .toString()
                                    .toUpperCase(),
                                txtColor,
                                10)
                          ],
                        ),
                      ],
                    ),
                  ),
                  gapH(),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      tc('Choose Driver', Colors.black, 15),
                      gapHC(5),
                      Bounce(
                        onPressed: () {
                          customerController.fnLookup("GUESTMASTER");
                        },
                        duration: const Duration(milliseconds: 110),
                        child: Container(
                          decoration: boxOutlineCustom(Colors.white, 5,
                              Colors.blueGrey.withOpacity(0.5)),
                          padding: const EdgeInsets.all(10),
                          child: Column(
                            crossAxisAlignment:
                            CrossAxisAlignment.start,
                            children: [
                              Row(
                                mainAxisAlignment:
                                MainAxisAlignment.spaceBetween,
                                children: [
                                  Row(
                                    children: [
                                      const Icon(
                                        Icons.account_circle_outlined,
                                        color: Colors.black,
                                        size: 12,
                                      ),
                                      gapWC(5),
                                      tc(
                                          bookingController
                                              .txtCustomerName.text,
                                          Colors.black,
                                          12)
                                    ],
                                  ),
                                  const Icon(
                                    Icons.search,
                                    color: txtColor,
                                    size: 15,
                                  )
                                ],
                              ),
                              const Divider(),
                              Column(
                                crossAxisAlignment:
                                CrossAxisAlignment.start,
                                children: [
                                  tc("${bookingController.ctmrApartmentDescp.value}|${bookingController.ctmrBuildingDescp.value}",
                                      Colors.black, 12),
                                  gapHC(8),
                                  customerController.wCustomerRow(
                                      Icons.call,
                                      "Mobile",
                                      bookingController
                                          .txtContactNo.text),
                                  bookingController
                                      .wstrPageMode.value !=
                                      "VIEW"
                                      ?
                                  gapHC(0):gapHC(0),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),

          Container(
            // width: size.width,
            decoration: boxDecoration(white, 15),
            margin:
            const EdgeInsets.only(left: 15.0, right: 10.0, bottom: 5.0),
            child: bookingTo(MediaQuery.of(context).size),
          ),
          Expanded(child: SingleChildScrollView(
            child: Container(
              child: Column(
                  children: wFilledItemLIst()

              ),
            ),
          ))

        ],
      ),
      bottomNavigationBar: (assignmentController.wstrPageMode.value ==
          "VIEW")
          ? BottomNavigationItem(
        mode: assignmentController.wstrPageMode.value,
        fnAdd: assignmentController.fnAdd,
        fnEdit: assignmentController.fnEdit,
        fnCancel: assignmentController.fnCancel,
        fnPage: assignmentController.fnPage,
        fnSave: assignmentController.fnSave,
        fnDelete: assignmentController.fnDelete,
      )
          : (assignmentController.wstrPageMode.value == "ADD" ||
          assignmentController.wstrPageMode.value == "EDIT")
          ? Padding(
        padding: const EdgeInsets.all(8.0),
        child: Row(
          children: [
            Expanded(
              child: Bounce(
                onPressed: () {
                  // dprint("BUILDING CODE  ${commonController.wstrBuildingCode.value}");
                  // dprint("APRTMNT CODE  ${commonController.wstrAprtmntCode.value}");
                  assignmentController.fnSave(context);
                },
                duration: const Duration(milliseconds: 110),
                child: Container(
                  decoration: boxDecoration(primaryColor, 30),
                  padding:
                  const EdgeInsets.symmetric(vertical: 10),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(
                        Icons.task_alt,
                        color: Colors.white,
                        size: 15,
                      ),
                      gapWC(5),
                      tcn('Assign', Colors.white, 15)
                    ],
                  ),
                ),
              ),
            ),
            Bounce(
              onPressed: () {
                assignmentController.fnCancel();
              },
              duration: const Duration(milliseconds: 110),
              child: Container(
                decoration: boxBaseDecoration(baseLight, 30),
                padding: const EdgeInsets.symmetric(
                    vertical: 10, horizontal: 10),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(
                      Icons.cancel_outlined,
                      color: Colors.black,
                      size: 15,
                    ),
                    gapWC(5),
                    tcn('Cancel', Colors.black, 12)
                  ],
                ),
              ),
            ),
          ],
        ),
      )
          : const BottomAppBar(),
    ));
  }


  //////////////////////////    WIDGET
  bookingTo(Size size) {
    return Container(
      margin: const EdgeInsets.only(left: 15, right: 15),
      padding: const EdgeInsets.only(top: 15),
      width: size.width,
      //height: size.height * 0.2,
      color: Colors.white,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          tc("Check Booking Number", txtColor, 12),
          gapHC(10),
          Container(
            child: Bounce(
              onPressed: () {
                assignmentController.fnLookup("CRDELIVERYMANMASTER");
              },
              duration: const Duration(milliseconds: 110),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Container(
                    padding: const EdgeInsets.all(5),
                    decoration: boxOutlineCustom(
                        Colors.white, 5, Colors.blueGrey.withOpacity(0.5)),
                    child: Container(
                        width: 400,
                        alignment: Alignment.centerRight,
                        padding: const EdgeInsets.all(7),
                        child: const Icon(
                          Icons.search,
                          color: txtColor,
                          size: 15,
                        )),
                  ),
                  gapWC(8),
                  Container(
                    decoration: boxDecoration(Colors.white70, 3),
                    child: Center(
                      child: Icon(Icons.check),
                    ),
                  ),
                ],
              ),
            ),
          ),
          gapHC(10),
        ],
      ),
    );

  }


  //===================================WIDGET
  wFilledItemLIst() {
    dprint("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrc      +"+orderlist.toString());
    List<Widget> rtnList = [] ;
    for (var e in orderlist) {
      var code =  e ["CODE"];
      var det =   (e["LOCATION"]??"");
      var type =  (e["PRIORITY"]??"");
      var name = (e["CNAME"]);
      var item = (e["ITEMS"]);
      rtnList.add(
          Padding(
            padding: const EdgeInsets.only(top: 10,right: 10,left: 10),
            child: Container(
              padding: EdgeInsets.all(20),
              decoration: boxDecoration(Colors.white, 10),
              child: Row(
                children: [
                  Container(
                    decoration: boxDecoration(Colors.white70, 3),
                    padding: EdgeInsets.all(5),
                    child: Center(
                      child: Icon(Icons.check),
                    ),
                  ),
                  gapWC(15),
                  Expanded(
                    child: Column(crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(

                          children: [
                            Row(
                              children: [
                                Icon(Icons.library_add),
                                tc(code.toString(), Colors.black, 12),
                              ],
                            ),
                            gapHC(5),
                            Row(
                              children: [
                                Icon(Icons.priority_high),
                                tcn(type, Colors.black, 12),
                              ],
                            ),

                          ],
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        ),

                        Row(
                          children: [
                            Icon(Icons.person),
                            tcn(name.toString(), Colors.black, 12),
                          ],
                        ),
                        gapHC(5),
                        Row(
                          children: [
                            Icon(Icons.place),
                            tcn(det.toString(), Colors.black, 12),
                          ],
                        ),
                        gapHC(5),
                        Row(
                          children: [
                            Icon(Icons.list),
                            tcn(item.toString(),Colors.black,12),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          )
      );
    }
    return rtnList;


  }
}

